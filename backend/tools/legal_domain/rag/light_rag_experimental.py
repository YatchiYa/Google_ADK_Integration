
import re
import ast
import operator
import requests
import yfinance as yf
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import pytz
from loguru import logger 
import json

import asyncio
import aiohttp


url = "https://legal-index.com/light_rag/query/stream"
user_prompt = """
    ‚öñÔ∏è R√¥le et objectif
        Vous √™tes un assistant juridique sp√©cialis√© dans le droit alg√©rien.
        Votre mission est d‚Äôidentifier et de restituer les articles de loi, codes, ordonnances ou d√©crets officiels du droit alg√©rien qui r√©pondent le plus pr√©cis√©ment √† la question de l‚Äôutilisateur.

        üìö Sources
        Votre base documentaire contient exclusivement des textes juridiques officiels : Code civil, Code p√©nal, Code de commerce, Code du travail, Code de la famille, ainsi que d‚Äôautres lois, ordonnances et d√©crets en vigueur en Alg√©rie.

        üß† Instructions de recherche

        Recherchez les articles de loi exacts qui d√©finissent, r√©gissent ou encadrent la situation d√©crite dans la question.

        Incluez √©galement les articles compl√©mentaires, interpr√©tatifs ou restrictifs qui pourraient √©clairer le sujet.

        √âvitez les documents hors du champ juridique ou qui ne pr√©sentent qu‚Äôune ressemblance lexicale.

        Ne modifiez, ne r√©sumez et n‚Äôinterpr√©tez jamais le texte juridique.

        Restituez l‚Äôint√©gralit√© du contenu de l‚Äôarticle, tel qu‚Äôil appara√Æt dans la base de donn√©es (sans omission ni reformulation).

        üìÑ Format de restitution attendu
        Pour chaque r√©sultat pertinent, indiquez :

        Le titre de la source (ex. : Code civil).

        Le num√©ro de l‚Äôarticle.

        Le texte complet de l‚Äôarticle, sans aucune alt√©ration.

        üîç Crit√®res de pertinence

        La correspondance juridique avec la question est prioritaire sur la similarit√© de mots.

        Les articles les plus sp√©cifiques et applicables doivent √™tre class√©s en premier.

        üó£Ô∏è Question de l‚Äôutilisateur :
        {user_query}
    """

def annuaire_du_code_algerien(query: str):  
    """
    Search and retrieve information from the Algerian Civil Code using RAG.
    
    Args:
        query (str): The legal question or topic to search for
        
    Returns:
        str: Legal information and analysis from Algerian Civil Code
    """
    
    payload = {
        "mode": "global",
        "response_type": "Multiple Paragraphs",
        "top_k": 40,
        "chunk_top_k": 20,
        "max_entity_tokens": 6000,
        "max_relation_tokens": 8000,
        "max_total_tokens": 30000,
        "only_need_context": False,
        "only_need_prompt": False,
        "stream": True,
        "history_turns": 0,
        "user_prompt": user_prompt,
        "enable_rerank": True,
        "query": query,
        "conversation_history": []
    }

    headers = {"Content-Type": "application/json"}

    try:
        with requests.post(url, headers=headers, data=json.dumps(payload), stream=True, timeout=120) as response:
            logger.info(f"Response status code: {response.status_code}")
            response.raise_for_status()
            full_text = ""
            
            for line in response.iter_lines():
                if line:
                    # Decode bytes to string if necessary
                    if isinstance(line, bytes):
                        line_str = line.decode('utf-8')
                    else:
                        line_str = str(line)
                    
                    logger.info(f"Response line: {line_str}")
                    full_text += line_str + "\n"
            
            result = full_text.strip()
            logger.info(f"Final response length: {len(result)} characters")
            
            # Try to parse JSON response and extract the actual content
            try:
                json_response = json.loads(result)
                if isinstance(json_response, dict):
                    if 'response' in json_response:
                        actual_response = json_response['response']
                        references = json_response.get('references', [])
                        
                        # Format the response with references if available
                        formatted_response = actual_response
                        if references:
                            formatted_response += "\n\nReferences:\n"
                            for i, ref in enumerate(references, 1):
                                formatted_response += f"{i}. {ref}\n"
                        
                        logger.info(f"Parsed JSON response successfully")
                        return formatted_response
                    else:
                        logger.info(f"JSON response doesn't contain 'response' field")
                        return result
                else:
                    logger.info(f"Response is not a JSON object")
                    return result
            except json.JSONDecodeError:
                logger.info(f"Response is not valid JSON, returning as-is")
                return result
            
    except requests.exceptions.RequestException as e:
        logger.error(f"Error while connecting to endpoint: {e}")
        return f"Error while connecting to endpoint: {e}"

async def annuaire_du_code_algerien_avancee(
    query: str,  
) -> str:
    """
    ASYNC VERSION: Search and retrieve information from the Algerian Civil Code using RAG.
    This is an async tool that collects streaming chunks and returns the complete result.
    Note: ADK doesn't support AsyncGenerator for regular tools, only for live video/audio streaming.
    
    Args:
        query (str): The legal question or topic to search for
        
    Returns:
        str: Complete legal information from Algerian Civil Code
    """ 

    payload = {
        "mode": "global",
        "response_type": "Multiple Paragraphs",
        "top_k": 40,
        "chunk_top_k": 20,
        "max_entity_tokens": 6000,
        "max_relation_tokens": 8000,
        "max_total_tokens": 30000,
        "only_need_context": False,
        "only_need_prompt": False,
        "stream": True,
        "history_turns": 0,
        "user_prompt": user_prompt,
        "enable_rerank": True,
        "query": query,
        "conversation_history": []
    }

    headers = {"Content-Type": "application/json"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload, timeout=aiohttp.ClientTimeout(total=120)) as response:
                logger.info(f"[ASYNC STREAMING] Response status code: {response.status}")
                response.raise_for_status()
                
                references = []
                response_text = ""
                
                # Collect all chunks from stream
                async for line in response.content:
                    if line:
                        # Decode bytes to string
                        line_str = line.decode('utf-8').strip()
                        
                        if not line_str:
                            continue
                        
                        try:
                            # Parse each JSON line
                            json_line = json.loads(line_str)
                            
                            # Handle references (usually comes first)
                            if 'references' in json_line:
                                references = json_line['references']
                                logger.info(f"[ASYNC STREAMING] Received {len(references)} references")
                            
                            # Handle response chunks - accumulate them
                            if 'response' in json_line:
                                chunk = json_line['response']
                                response_text += chunk
                                logger.debug(f"[ASYNC STREAMING] Accumulated chunk: {len(response_text)} chars total")
                        
                        except json.JSONDecodeError:
                            logger.warning(f"[ASYNC STREAMING] Could not parse line as JSON: {line_str[:100]}")
                            continue
                
                # Format final response with references
                final_response = response_text
                if references:
                    final_response += "\n\nüìö References:\n"
                    for i, ref in enumerate(references, 1):
                        final_response += f"{i}. {ref}\n"
                
                logger.info(f"[ASYNC STREAMING] Completed. Total response length: {len(final_response)} characters")
                return final_response
                
    except Exception as e:
        logger.error(f"[ASYNC STREAMING] Error while connecting to endpoint: {e}")
        return f"‚ùå Error while connecting to legal database: {str(e)}"

